{"version":3,"sources":["webpack://src/scss/components/_footer.scss","webpack://src/scss/functions/_var.scss","webpack://src/scss/components/footer.entry.scss","webpack://node_modules/bootstrap/scss/mixins/_breakpoints.scss"],"names":[],"mappings":"AAAA,WACE,sCAAa,CACb,0DAA4B,CAC5B,wDAA0B,CAC1B,yCCC0B,CDA1B,+BCA0B,CDC1B,aECF,CFPA,iBAQI,yDEGJ,CFXA,qBAUM,eAAgB,CAChB,eEKN,CFhBA,wBAgBM,eAAgB,CAChB,eEIN,CFrBA,2BAqBI,QEIJ,CFzBA,yCAyBI,2CAAa,CACb,qDAA4B,CAC5B,wDAA0B,CAC1B,oCCvBwB,CDwBxB,8CCxBwB,CDyBxB,oCEIJ,CC0BI,yBH5DJ,mCAmCM,YAAa,CACb,mBEIJ,CACF","file":"footer.min.css","sourcesContent":[".#{$prefix}footer {\n  --text-color: var(--color-secondary-01);\n  --status-focused-background: var(--color-primary-darken-01);\n  --status-hover-background: var(--color-primary-darken-01);\n  background: v(color-primary-darken-02);\n  color: v(color-secondary-01);\n  display: block;\n  .logo {\n    padding: v(spacing-scale-6x) 0 v(spacing-scale-4x);\n    img {\n      max-height: 48px;\n      max-width: 180px;\n    }\n  }\n  .assigns {\n    img {\n      max-height: 46px;\n      max-width: 180px;\n    }\n  }\n  .social-network {\n    border: 0;\n  }\n  &[inverted],\n  &.inverted {\n    --text-color: var(--color-primary-darken-02);\n    --status-focused-background: var(--color-secondary-01);\n    --status-hover-background: var(--color-primary-pastel-02);\n    background: v(color-secondary-01);\n    border-top: 1px solid v(color-secondary-04);\n    color: v(color-primary-darken-02);\n  }\n\n  @include media-breakpoint-up(md) {\n    .#{$prefix}list .item .support {\n      display: none;\n      pointer-events: none;\n    }\n  }\n}\n","// CrÃ©ditos: https://dev.to/meduzen/write-css-variables-faster-in-scss-1mon\n@function v($var, $fallback: null) {\n  @if ($fallback) {\n    @return var(--#{$var}, #{$fallback});\n  } @else {\n    @return var(--#{$var});\n  }\n}\n","@import '../base';\n@import 'footer';\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n"]}
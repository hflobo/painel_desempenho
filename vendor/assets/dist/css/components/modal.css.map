{"version":3,"sources":["webpack:///src/scss/components/_modal.scss","webpack:///src/scss/functions/_var.scss","webpack:///src/scss/components/modal.entry.scss","webpack:///node_modules/bootstrap/scss/mixins/_breakpoints.scss"],"names":[],"mappings":"AAEA;EACE,yCAH6C;EAI7C,gCCC0B;ACF5B;;AFEE;EACE,uCCDwB;EDExB,kBAAkB;AECtB;;AFHG;EAIG,uBAAuB;EACvB,SAAS;EACT,mCCNsB;EDOtB,sCCPsB;EDQtB,UAAU;EACV,kBAAkB;EAClB,QAAQ;EACR,yCAAwC;AEG9C;;AFAE;EACE,4BAA4B;EAC5B,qBAAqB;EACrB,oBAAoB;EACpB,uCClBwB;EDmBxB,uBCnBwB;EDoBxB,SAAS;EACT,wCCrBwB;EDsBxB,gBAAgB;EAChB,uBAAuB;EACvB,UAAU;AEGd;;AFbG;EAaG,qBAAqB;EACrB,kBAA6B;AEInC;;AFDE;EACE,mCChCwB;ACoC5B;;AFFE;EACE,aAAa;EACb,eAAe;AEKnB;;AF5CA;EA0CI,SAAS;EACT,sCCxCwB;EDyCxB,aAAa;EACb,+CAA8C;EAC9C,gDAA+C;EAC/C,cAAc;EACd,kCC7CwB;ED8CxB,YAAY;EACZ,WAAW;AEMf;;AFxDA;EAoDM,UAAU;AEQhB;;AF5DA;EAuDM,qCCpDsB;AC6D5B;;AFhEA;EA0DM,qCCvDsB;ACiE5B;;AFpEA;EA8DM,aAAa;AEUnB;;AFxEA;EAkEQ,qCC/DoB;ACyE5B;;AF5EA;EAyEM,qHACiD;EACjD,gCCxEsB;AC8E5B;;ACvBI;EHuBF;IACE,WAAW;EEIb;EFLA;IAGI,gBAAgB;EEKpB;EFRA;IAMI,gBAAgB;EEKpB;EFXA;IASI,gBAAgB;EEKpB;EFdA;IAaI,gBAAgB;EEIpB;AACF","file":"css/components/modal.css","sourcesContent":["$br-modal-box-shadow-color: rgba(0, 0, 0, 0.16);\n\n.#{$prefix}modal {\n  box-shadow: 0 3px 6px $br-modal-box-shadow-color;\n  padding: v(spacing-scale-2x);\n  &-header {\n    margin-bottom: v(spacing-scale-3xh);\n    position: relative;\n    .close {\n      background: transparent;\n      border: 0;\n      color: v(color-primary-default);\n      font-weight: v(font-weight-medium);\n      padding: 0;\n      position: absolute;\n      right: 0;\n      top: calc(#{v(spacing-scale-half)} * -1);\n    }\n  }\n  &-title {\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 2;\n    display: -webkit-box;\n    font-size: v(font-size-scale-up-01);\n    font-weight: v($font-weight-bold);\n    margin: 0;\n    max-height: v(font-size-scale-up-07);\n    overflow: hidden;\n    text-overflow: ellipsis;\n    width: 80%;\n\n    &.is-inline {\n      -webkit-line-clamp: 1;\n      max-height: $h3-font-size * 2;\n    }\n  }\n  &-body {\n    margin: 0 0 v(spacing-scale-5x);\n  }\n  &-footer {\n    display: flex;\n    flex-wrap: wrap;\n  }\n  .#{$prefix}card {\n    border: 0;\n    font-size: v(font-size-scale-base);\n    height: 216px;\n    margin-left: calc(#{v(spacing-scale-2x)} * -1);\n    margin-right: calc(#{v(spacing-scale-2x)} * -1);\n    overflow: auto;\n    padding: 0 v(spacing-scale-2x);\n    resize: none;\n    width: auto;\n    &::-webkit-scrollbar {\n      width: 8px;\n    }\n    &::-webkit-scrollbar-track {\n      background: v(color-secondary-03);\n    }\n    &::-webkit-scrollbar-thumb {\n      background: v(color-secondary-06);\n    }\n    &:focus,\n    &:active {\n      outline: none;\n    }\n    &:hover {\n      &::-webkit-scrollbar-thumb {\n        background: v(color-secondary-07);\n      }\n    }\n  }\n\n  &.is-scroll {\n    .#{$prefix}card {\n      box-shadow: inset 0 -4px 3px rgba(v(rgb-secondary-09), 0.16),\n        inset 0 4px 3px rgba(v(rgb-secondary-09), 0.16);\n      padding: v(spacing-scale-2x);\n    }\n  }\n}\n\n@include media-breakpoint-up(sm) {\n  .#{$prefix}modal {\n    width: auto;\n    &.is-xsmall {\n      max-width: 220px;\n    }\n    &.is-small {\n      max-width: 300px;\n    }\n    &.is-medium {\n      max-width: 500px;\n    }\n    &.is-large,\n    &.is-scroll {\n      max-width: 640px;\n    }\n  }\n}\n","// CrÃ©ditos: https://dev.to/meduzen/write-css-variables-faster-in-scss-1mon\n@function v($var, $fallback: null) {\n  @if ($fallback) {\n    @return var(--#{$var}, #{$fallback});\n  } @else {\n    @return var(--#{$var});\n  }\n}\n","@import '../base';\n@import 'modal';\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n"],"sourceRoot":""}
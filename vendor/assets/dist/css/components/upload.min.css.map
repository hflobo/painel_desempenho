{"version":3,"sources":["webpack://src/scss/mixins/_list.scss","webpack://src/scss/components/upload.entry.scss","webpack://src/scss/components/_upload.scss","webpack://src/scss/functions/_var.scss","webpack://src/scss/mixins/_item.scss","webpack://src/scss/mixins/_states.scss","webpack://node_modules/bootstrap/scss/mixins/_breakpoints.scss"],"names":[],"mappings":"AAKM,gBCgDN,CCrDA,kCAGI,YDCJ,CCJA,oCAOI,UAAW,CACX,eDCJ,CCTA,6CAUM,oCDGN,CCbA,0BAcI,iBAAkB,CAClB,iBAAkB,CAClB,oCCXwB,CDYxB,qCCZwB,CDaxB,eAAgB,CAChB,UDGJ,CCtBA,8BAqBM,wBChBsB,CDiBtB,kCCjBsB,CDkBtB,6BDKN,CC5BA,+BA0BM,qCCrBsB,CDsBtB,sCCtBsB,CDuBtB,kCCvBsB,CDwBtB,sCDMN,CCnCA,qBAkCI,oCDKJ,CDrCE,2BACE,eCwCJ,CDtCM,qCACE,kBAAmB,CACnB,WAAS,CACT,oBAAqB,CACrB,WAAa,CACb,uCGLoB,CHMpB,iBAAkB,CAClB,uCCyCR,CDpCE,sDAEE,QCuCJ,CDtCI,4DACE,mCC0CN,CDxCI,wHAEE,qEC6CN,CDzCE,2BACE,wCGzBwB,CH0BxB,mCC4CJ,CD1CE,2BACE,iBAAkB,CAClB,mCC6CJ,CG9EE,8BACE,kBAAmB,CACnB,YAAa,CAEX,WHgFN,CG9EI,uCACE,iCHiFN,CGhFM,mDACE,eHmFR,CGjFM,kDACE,cHoFR,CG/EI,uCACE,MAAO,CACP,iCDhBsB,CCkBpB,WHoFR,CGhFQ,yLAHA,eAAgB,CAChB,sBAAuB,CACvB,kBHyFR,CGhFM,oDACE,UHmFR,CG/EI,6EAEE,iDHiFN,CG5EM,+EAEE,WH8ER,CG5EM,iFAEE,WH8ER,CG5EM,qFAEE,WH8ER,CG1EI,+EAEE,4CD1DsB,CC2DtB,iCH4EN,CG1EI,qFAEE,8HAIG,CACH,kCHwEN,CGtEI,+EAEE,WHwEN,CGpEE,mEAEE,wBAAuB,CACvB,QAAS,CACT,uBDhFwB,CCiFxB,SAAU,CACV,eAAgB,CAChB,UHuEJ,CIxJE,+GACE,wHJ4JJ,CInKE,+GACE,yCJuKJ,CI3JE,iHACE,2CFVwB,CEWxB,gCJ+JJ,CGlFM,qVAGE,6CD3FoB,CC4FpB,kCHsFR,CG9EM,iFACE,WHiFR,CK/HI,yBF6CE,iFAGI,WHoFR,CACF,CGnFQ,wMAEE,WHqFV,CKzII,yBFkDI,wMAII,WHwFV,CACF,CGtFQ,4MAEE,WHwFV,CGtFQ,oNAEE,WHwFV,CK1II,4BJzEJ,oCA4CM,oBAAsB,CACtB,yDCxCsB,CDyCtB,WD4KJ,CC1NF,+BAkDQ,wCD2KN,CACF","file":"upload.min.css","sourcesContent":["@mixin list {\n  // Bullets da lista não ordenada\n  ul {\n    list-style: none;\n    li {\n      &::before {\n        color: currentColor;\n        content: '•';\n        display: inline-block;\n        opacity: 0.65;\n        padding-right: v(spacing-scale-base);\n        position: absolute;\n        transform: scale(3) translate(-2px, -1px);\n      }\n    }\n  }\n  // Estilo base para listas\n  ul,\n  ol {\n    margin: 0;\n    li {\n      padding: v(spacing-scale-base) 0;\n    }\n    ul,\n    ol {\n      margin: v(spacing-scale-base) 0 calc(#{v(spacing-scale-base)} * -1);\n    }\n  }\n  // Estilo base para lista de definição\n  dt {\n    font-weight: v(font-weight-semi-bold);\n    padding: v(spacing-scale-base) 0;\n  }\n  dd {\n    font-style: italic;\n    padding: v(spacing-scale-base) 0;\n  }\n}\n","@import '../base';\n@import 'upload';\n",".#{$prefix}upload {\n  input,\n  label {\n    display: none;\n  }\n\n  .br-button.upload-button {\n    width: 100%;\n    max-width: 550px;\n    &:active * {\n      color: v(color-primary-pastel-01);\n    }\n  }\n  .upload-button {\n    border: 1px dashed;\n    border-radius: 4px;\n    padding-left: v(spacing-scale-2x);\n    padding-right: v(spacing-scale-2x);\n    text-align: left;\n    width: 100%;\n    svg {\n      padding-left: v($spacing-scale-2x);\n      color: v(color-primary-default);\n      font-size: v(icon-size-lg);\n    }\n    span {\n      font-size: v(font-size-scale-base);\n      font-weight: v(font-weight-regular);\n      color: v(color-primary-default);\n      padding-left: v(spacing-scale-half);\n    }\n  }\n\n  .feedback {\n    margin-top: v(spacing-scale-base);\n  }\n\n  .upload-list {\n    @include list;\n    @include item($ellipsis: true);\n  }\n\n  @include media-breakpoint-down(xs) {\n    .br-button.upload-button {\n      width: 100% !important;\n      padding: v(spacing-scale-base) v(spacing-scale-2x);\n      height: auto;\n    }\n    .upload-button {\n      span {\n        font-size: v(font-size-scale-down-01);\n      }\n    }\n  }\n}\n","// Créditos: https://dev.to/meduzen/write-css-variables-faster-in-scss-1mon\n@function v($var, $fallback: null) {\n  @if ($fallback) {\n    @return var(--#{$var}, #{$fallback});\n  } @else {\n    @return var(--#{$var});\n  }\n}\n","// É formado por: [support] content [support]\n@mixin item($ellipsis: false) {\n  .item {\n    align-items: center;\n    display: flex;\n    @if $ellipsis {\n      height: 56px;\n    }\n    .support {\n      padding: 0 v(spacing-scale-2x);\n      &:first-child {\n        padding-right: 0;\n      }\n      &:last-child {\n        padding-left: 0;\n      }\n    }\n    // 1 - Aplicação das reticências\n    // 2 - Fix para funcionar reticências no flexbox\n    .content {\n      flex: 1;\n      padding: 0 v(spacing-scale-2x);\n      @if $ellipsis {\n        min-width: 0; // 2\n        overflow: hidden; // 1\n        text-overflow: ellipsis; // 1\n        white-space: nowrap; // 1\n        .subtitle,\n        .text,\n        .description {\n          overflow: hidden;\n          text-overflow: ellipsis;\n          white-space: nowrap;\n        }\n      }\n      .description {\n        opacity: 0.6;\n      }\n    }\n    // Aplica separador\n    &.divider,\n    &[divider] {\n      border-bottom: 1px solid v(color-secondary-04);\n    }\n    // Alturas dos itens de acordo com linhas\n    // Usar .one-line é opcional, pois é aplicado por padrão\n    @if $ellipsis {\n      &.one-line,\n      &[one-line] {\n        height: 56px;\n      }\n      &.two-lines,\n      &[two-lines] {\n        height: 72px;\n      }\n      &.three-lines,\n      &[three-lines] {\n        height: 88px;\n      }\n    }\n    // Estados\n    &.selected,\n    &[selected] {\n      background: v(status-selected-background);\n      color: v(status-selected-text);\n    }\n    &.highlighted,\n    &[highlighted] {\n      background: v(status-highlight-background)\n        linear-gradient(\n          v(status-highlight-overlay),\n          v(status-highlight-overlay)\n        );\n      color: v(status-highlight-text);\n    }\n    &:disabled,\n    &[disabled] {\n      opacity: 0.65;\n    }\n  }\n  // Remover estilo de links e botões\n  a.item,\n  button.item {\n    background: transparent;\n    border: 0;\n    color: v(text-color);\n    padding: 0;\n    text-align: left;\n    width: 100%;\n    &:not([disabled]) {\n      @include focus;\n      @include hover;\n      @include active;\n      &:active,\n      &.active,\n      &[active] {\n        background: v(status-activated-background);\n        color: v(status-activated-text);\n      }\n    }\n  }\n  // Versão densidade\n  @if $ellipsis {\n    &.condensed,\n    &[condensed] {\n      .item {\n        height: 48px;\n        @include media-breakpoint-up(md) {\n          height: 32px;\n        }\n        &.one-line,\n        &[one-line] {\n          height: 48px;\n          @include media-breakpoint-up(md) {\n            height: 32px;\n          }\n        }\n        &.two-lines,\n        &[two-lines] {\n          height: 56px;\n        }\n        &.three-lines,\n        &[three-lines] {\n          height: 72px;\n        }\n      }\n    }\n  }\n}\n","@mixin hover {\n  &:hover {\n    background: v(status-hover-background);\n  }\n}\n\n@mixin focus {\n  &:focus {\n    background: v(status-focused-background)\n      linear-gradient(v(status-focused-overlay), v(status-focused-overlay));\n  }\n}\n\n@mixin active {\n  &:active {\n    background: v(status-pressed-background);\n    color: v(status-pressed-text);\n  }\n}\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n"]}
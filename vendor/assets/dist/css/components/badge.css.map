{"version":3,"sources":["webpack:///src/scss/components/_badge.scss","webpack:///src/scss/components/badge.entry.scss","webpack:///src/scss/functions/_var.scss","webpack:///src/scss/mixins/_icons.scss"],"names":[],"mappings":"AAGA;EACE,qBAAqB;EACrB,kBAAkB;ACFpB;;ADAA;EAII,qCEFwB;EFGxB,mBAAmB;EACnB,+CEJwB;EFKxB,qBAAqB;EACrB,yCENwB;EFOxB,yCEPwB;EFQxB,gBAbY;EAcZ,eAdY;EAeZ,oCEVwB;EFWxB,kBAAkB;EAClB,kBAAkB;EAClB,MAAM;EACN,UAAU;ACAd;;AEZE;;;;;;;EHcI,4BAAY;EACZ,WAAW;ACQjB;;AD3BA;EAsBM,8CAA6C;ACSnD;;AD/BA;EAyBM,6CAA4C;ACUlD;;ADnCA;EA4BM,kBAAkB;EAClB,eA/Be;EAgCf,cAhCe;EAiCf,UAAU;ACWhB;;AD1CA;EAmCI,qBAAqB;ACWzB;;AD9CA;EAyCM,SAAS;EACT,SAAS;ACSf;;ADnDA;EAmDQ,qBAAwB;ACIhC;;ADvDA;EAqDU,0DAA+D;ACMzE;;AD3DA;EAwDU,yDAA8D;ACOxE;;AD/DA;EA2DU,kBAA6B;EAC7B,iBAA4B;ACQtC;;ADpEA;EAmDQ,qBAAwB;ACqBhC;;ADxEA;EAqDU,0DAA+D;ACuBzE;;AD5EA;EAwDU,yDAA8D;ACwBxE;;ADhFA;EA2DU,kBAA6B;EAC7B,iBAA4B;ACyBtC;;ADrFA;EAuEQ,gCAA0C;EAExC,gCEvEkB;ADwF5B;;AD1FA;EAuEQ,gCAA0C;ACuBlD;;AD9FA;EAuEQ,+BAA0C;EAExC,gCEvEkB;ADiG5B;;ADnGA;EAuEQ,6BAA0C;EAExC,gCEvEkB;ADsG5B","file":"css/components/badge.css","sourcesContent":["$badge-min: 18px;\n$badge-empty-min: 8px;\n\n.#{$prefix}badge {\n  display: inline-block;\n  position: relative;\n  .icon {\n    background: v(color-secondary-03);\n    border-radius: 40px;\n    box-shadow: 0 0 0 1px v(color-secondary-01);\n    display: inline-block;\n    font-size: v(font-size-scale-down-01);\n    font-weight: v(font-weight-semi-bold);\n    min-height: $badge-min;\n    min-width: $badge-min;\n    padding: 0 v(spacing-scale-half);\n    position: absolute;\n    text-align: center;\n    top: 0;\n    z-index: 1;\n    @include icon {\n      --icon-size: v(icon-size-xs);\n      width: auto;\n    }\n    &:first-child {\n      right: calc(100% - #{v(spacing-scale-baseh)});\n    }\n    &:last-child {\n      left: calc(100% - #{v(spacing-scale-baseh)});\n    }\n    &:empty {\n      border-radius: 50%;\n      min-height: $badge-empty-min;\n      min-width: $badge-empty-min;\n      padding: 0;\n    }\n  }\n  .content {\n    display: inline-block;\n  }\n  &.is-bottom,\n  &.bottom,\n  &[bottom] {\n    .icon {\n      bottom: 0;\n      top: auto;\n    }\n  }\n  // Tamanhos\n  @each $key, $value in (medium: 1.5, large: 2.5) {\n    &.is-#{$key},\n    &.#{$key},\n    &[#{$key}] {\n      .icon {\n        transform: scale($value);\n        &:first-child {\n          right: calc(100% - #{v(spacing-scale-base)} * 1.75 * #{$value});\n        }\n        &:last-child {\n          left: calc(100% - #{v(spacing-scale-base)} * 1.75 * #{$value});\n        }\n        &:empty {\n          min-height: $badge-min * 0.75;\n          min-width: $badge-min * 0.75;\n        }\n      }\n    }\n  }\n  // Cores\n  @each $state in (success, warning, danger, info) {\n    &.is-#{$state},\n    &.#{$state},\n    &[#{$state}] {\n      .icon {\n        background: var(--color-#{$state});\n        @if $state != warning {\n          color: v(color-secondary-01);\n        }\n      }\n    }\n  }\n}\n","@import '../base';\n@import 'badge';\n","// Cr√©ditos: https://dev.to/meduzen/write-css-variables-faster-in-scss-1mon\n@function v($var, $fallback: null) {\n  @if ($fallback) {\n    @return var(--#{$var}, #{$fallback});\n  } @else {\n    @return var(--#{$var});\n  }\n}\n","@mixin icon-size($value) {\n  @include icon {\n    --icon-size: #{$value};\n  }\n}\n\n@mixin icon {\n  .svg-inline--fa,\n  .fa,\n  .fab,\n  .fad,\n  .fal,\n  .far,\n  .fas {\n    @content;\n  }\n}\n"],"sourceRoot":""}